I'll provide a comprehensive list of all implemented features and components in your e-commerce API:

### 1. Models
1. **User**
   - Authentication with secure password
   - Role-based access (customer/admin)
   - Associations with orders, addresses, cart, wishlists
   - Methods for order management and review tracking

2. **Product**
   - Includes `Reviewable` concern
   - Associations with variants, reviews, categories
   - Search functionality with pg_search
   - Stock management and pricing
   - Image attachments

3. **ProductVariant**
   - SKU management
   - Stock tracking
   - Price variations
   - Option values (size, color, etc.)

4. **ProductReview**
   - Rating system (1-5 stars)
   - Moderation system
   - Review statistics
   - User verification
   - Metadata support

5. **Order**
   - State machine with AASM
   - Payment tracking
   - Shipping information
   - Order items management

6. **OrderItem**
   - Quantity tracking
   - Price calculations
   - Product variant associations

7. **Category/SubCategory**
   - Hierarchical structure
   - Product organization

### 2. Database Schema
1. **Users Table**
   - Authentication fields
   - Role management
   - Profile information

2. **Products Table**
   - Basic product information
   - Pricing
   - Stock management
   - Review statistics
   - Metadata

3. **ProductVariants Table**
   - SKU tracking
   - Price variations
   - Stock quantities
   - Option values

4. **ProductReviews Table**
   - Rating system
   - Moderation status
   - User verification
   - Metadata

5. **Orders Table**
   - Status tracking
   - Payment information
   - Shipping details
   - Total amounts

6. **OrderItems Table**
   - Quantity tracking
   - Price calculations
   - Product associations

### 3. Controllers
1. **Authentication**
   - Login/Register
   - Password reset
   - Token management

2. **Products**
   - CRUD operations
   - Search functionality
   - Variant management

3. **ProductReviews**
   - Review management
   - Moderation
   - Statistics

4. **Orders**
   - Order processing
   - Status management
   - Payment handling

5. **Admin Controllers**
   - Dashboard
   - User management
   - Product management
   - Order management
   - Review moderation

### 4. Services
1. **Review Services**
   - ReviewNotificationService
   - ReviewModerationService
   - ReviewStatisticsService
   - ReviewAnalyticsService
   - ReviewRecommendationService

2. **Order Services**
   - OrderProcessingService
   - PaymentService
   - ShippingService

### 5. Serializers
1. **ProductSerializer**
   - Basic product information
   - Variants
   - Reviews

2. **ProductReviewSerializer**
   - Review details
   - User information
   - Product association

3. **OrderSerializer**
   - Order details
   - Items
   - Status information

4. **UserSerializer**
   - Profile information
   - Order history
   - Review history

### 6. Background Jobs
1. **Review Jobs**
   - ReviewNotificationJob
   - ModerateReviewJob
   - UpdateReviewStatisticsJob
   - CacheReviewAnalyticsJob
   - CacheReviewRecommendationsJob

2. **Order Jobs**
   - OrderProcessingJob
   - PaymentProcessingJob
   - ShippingNotificationJob

### 7. Features
1. **Authentication & Authorization**
   - JWT-based authentication
   - Role-based access control
   - Password policies

2. **Product Management**
   - Variant support
   - Stock tracking
   - Image handling
   - Search functionality

3. **Review System**
   - Rating system
   - Moderation
   - Statistics
   - Analytics
   - Recommendations

4. **Order Management**
   - State machine
   - Payment processing
   - Shipping tracking
   - Stock updates

5. **Admin Features**
   - Dashboard
   - User management
   - Product management
   - Order management
   - Review moderation

6. **Caching**
   - Review analytics
   - Product recommendations
   - Search results

7. **Background Processing**
   - Review moderation
   - Statistics updates
   - Analytics caching
   - Recommendation updates

8. **Email Notifications**
   - Review notifications
   - Order updates
   - Admin alerts

9. **API Documentation**
   - Swagger/OpenAPI
   - Endpoint documentation
   - Authentication details

10. **Security Features**
    - Rate limiting
    - Input validation
    - SQL injection prevention
    - XSS protection


Yes, we can perform integration testing using curl commands. I'll provide a comprehensive set of curl commands to test various endpoints of your e-commerce API:

### 1. Authentication Endpoints

```bash
# Register a new user
curl -X POST http://localhost:3000/api/v1/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "user": {
      "username": "testuser",
      "email": "test@example.com",
      "password": "Password123",
      "first_name": "Test",
      "last_name": "User"
    }
  }'

# Login
curl -X POST http://localhost:3000/api/v1/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@example.com",
    "password": "Password123"
  }'

# Refresh token
curl -X POST http://localhost:3000/api/v1/auth/refresh \
  -H "Content-Type: application/json" \
  -d '{
    "refresh_token": "your_refresh_token"
  }'
```

### 2. Product Endpoints

```bash
# Get all products
curl -X GET http://localhost:3000/api/v1/products \
  -H "Authorization: Bearer your_access_token"

# Get a specific product
curl -X GET http://localhost:3000/api/v1/products/1 \
  -H "Authorization: Bearer your_access_token"

# Search products
curl -X GET "http://localhost:3000/api/v1/products/search?q=phone" \
  -H "Authorization: Bearer your_access_token"
```

### 3. Review Endpoints

```bash
# Get product reviews
curl -X GET http://localhost:3000/api/v1/products/1/reviews \
  -H "Authorization: Bearer your_access_token"

# Create a review
curl -X POST http://localhost:3000/api/v1/products/1/reviews \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "product_review": {
      "title": "Great product!",
      "content": "This product exceeded my expectations.",
      "rating": 5
    }
  }'

# Get review statistics
curl -X GET http://localhost:3000/api/v1/products/1/reviews/statistics \
  -H "Authorization: Bearer your_access_token"
```

### 4. Order Endpoints

```bash
# Create an order
curl -X POST http://localhost:3000/api/v1/orders \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "order": {
      "address_id": 1,
      "order_items": [
        {
          "product_variant_id": 1,
          "quantity": 2
        }
      ]
    }
  }'

# Get user orders
curl -X GET http://localhost:3000/api/v1/orders \
  -H "Authorization: Bearer your_access_token"

# Cancel an order
curl -X POST http://localhost:3000/api/v1/orders/1/cancel \
  -H "Authorization: Bearer your_access_token"
```

### 5. Admin Endpoints

```bash
# Get dashboard statistics
curl -X GET http://localhost:3000/api/v1/admin/dashboard/statistics \
  -H "Authorization: Bearer admin_access_token"

# Get pending reviews
curl -X GET http://localhost:3000/api/v1/admin/products/1/reviews/pending \
  -H "Authorization: Bearer admin_access_token"

# Approve a review
curl -X POST http://localhost:3000/api/v1/admin/products/1/reviews/1/approve \
  -H "Authorization: Bearer admin_access_token"

# Get review analytics
curl -X GET "http://localhost:3000/api/v1/admin/reviews/analytics?start_date=2024-01-01&end_date=2024-12-31" \
  -H "Authorization: Bearer admin_access_token"
```

### 6. Cart Endpoints

```bash
# Add to cart
curl -X POST http://localhost:3000/api/v1/cart_items \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "cart_item": {
      "product_variant_id": 1,
      "quantity": 1
    }
  }'

# Update cart item
curl -X PATCH http://localhost:3000/api/v1/cart_items/1 \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "cart_item": {
      "quantity": 2
    }
  }'
```

### 7. Wishlist Endpoints

```bash
# Add to wishlist
curl -X POST http://localhost:3000/api/v1/wishlists \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "wishlist": {
      "product_id": 1
    }
  }'
```

### 8. Review Recommendations

```bash
# Get personalized recommendations
curl -X GET http://localhost:3000/api/v1/reviews/recommendations \
  -H "Authorization: Bearer your_access_token"
```

### Testing Tips:

1. **Save Tokens**: After login, save the access token and refresh token for subsequent requests:
```bash
# Save tokens to environment variables
export ACCESS_TOKEN="your_access_token"
export REFRESH_TOKEN="your_refresh_token"

# Use in curl commands
curl -H "Authorization: Bearer $ACCESS_TOKEN" ...
```

2. **Test Error Cases**:
```bash
# Test invalid token
curl -X GET http://localhost:3000/api/v1/products \
  -H "Authorization: Bearer invalid_token"

# Test rate limiting
for i in {1..6}; do
  curl -X GET http://localhost:3000/api/v1/products \
    -H "Authorization: Bearer your_access_token"
done
```

3. **Test Validation**:
```bash
# Test invalid review rating
curl -X POST http://localhost:3000/api/v1/products/1/reviews \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "product_review": {
      "title": "Great product!",
      "content": "This product exceeded my expectations.",
      "rating": 6
    }
  }'
```

4. **Test Pagination**:
```bash
# Test paginated endpoints
curl -X GET "http://localhost:3000/api/v1/products?page=2&per_page=10" \
  -H "Authorization: Bearer your_access_token"
```


I'll provide a comprehensive list of edge cases and specific test scenarios for your e-commerce API. These tests will help ensure the robustness and reliability of your system:

### 1. Authentication Edge Cases

```bash
# 1. Invalid Credentials
curl -X POST http://localhost:3000/api/v1/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "nonexistent@example.com",
    "password": "wrongpassword"
  }'

# 2. Malformed Email
curl -X POST http://localhost:3000/api/v1/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "user": {
      "username": "testuser",
      "email": "invalid-email",
      "password": "Password123"
    }
  }'

# 3. Weak Password
curl -X POST http://localhost:3000/api/v1/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "user": {
      "username": "testuser",
      "email": "test@example.com",
      "password": "123"
    }
  }'

# 4. Expired Token
curl -X GET http://localhost:3000/api/v1/products \
  -H "Authorization: Bearer expired_token"

# 5. Multiple Login Attempts (Rate Limiting)
for i in {1..6}; do
  curl -X POST http://localhost:3000/api/v1/auth/login \
    -H "Content-Type: application/json" \
    -d '{
      "email": "test@example.com",
      "password": "wrongpassword"
    }'
done
```

### 2. Product Edge Cases

```bash
# 1. Out of Stock Product
curl -X POST http://localhost:3000/api/v1/orders \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "order": {
      "address_id": 1,
      "order_items": [
        {
          "product_variant_id": 1,
          "quantity": 999999
        }
      ]
    }
  }'

# 2. Negative Quantity
curl -X POST http://localhost:3000/api/v1/cart_items \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "cart_item": {
      "product_variant_id": 1,
      "quantity": -1
    }
  }'

# 3. Non-existent Product
curl -X GET http://localhost:3000/api/v1/products/999999 \
  -H "Authorization: Bearer your_access_token"

# 4. Large Search Query
curl -X GET "http://localhost:3000/api/v1/products/search?q=$(printf 'a%.0s' {1..1000})" \
  -H "Authorization: Bearer your_access_token"
```

### 3. Review Edge Cases

```bash
# 1. Duplicate Review
curl -X POST http://localhost:3000/api/v1/products/1/reviews \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "product_review": {
      "title": "Great product!",
      "content": "This product exceeded my expectations.",
      "rating": 5
    }
  }'

# 2. Extreme Rating Values
curl -X POST http://localhost:3000/api/v1/products/1/reviews \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "product_review": {
      "title": "Terrible!",
      "content": "Worst product ever.",
      "rating": 0
    }
  }'

# 3. Very Long Review Content
curl -X POST http://localhost:3000/api/v1/products/1/reviews \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "product_review": {
      "title": "Long Review",
      "content": "$(printf 'a%.0s' {1..2000})",
      "rating": 5
    }
  }'

# 4. Review with Special Characters
curl -X POST http://localhost:3000/api/v1/products/1/reviews \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "product_review": {
      "title": "Special Chars!@#$%^&*()",
      "content": "Contains special characters: !@#$%^&*()",
      "rating": 5
    }
  }'
```

### 4. Order Edge Cases

```bash
# 1. Empty Order
curl -X POST http://localhost:3000/api/v1/orders \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "order": {
      "address_id": 1,
      "order_items": []
    }
  }'

# 2. Cancel Completed Order
curl -X POST http://localhost:3000/api/v1/orders/1/cancel \
  -H "Authorization: Bearer your_access_token"

# 3. Order with Multiple Same Items
curl -X POST http://localhost:3000/api/v1/orders \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "order": {
      "address_id": 1,
      "order_items": [
        {
          "product_variant_id": 1,
          "quantity": 1
        },
        {
          "product_variant_id": 1,
          "quantity": 1
        }
      ]
    }
  }'
```

### 5. Cart Edge Cases

```bash
# 1. Add Same Item Multiple Times
for i in {1..3}; do
  curl -X POST http://localhost:3000/api/v1/cart_items \
    -H "Authorization: Bearer your_access_token" \
    -H "Content-Type: application/json" \
    -d '{
      "cart_item": {
        "product_variant_id": 1,
        "quantity": 1
      }
    }'
done

# 2. Update to Zero Quantity
curl -X PATCH http://localhost:3000/api/v1/cart_items/1 \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "cart_item": {
      "quantity": 0
    }
  }'
```

### 6. Admin Edge Cases

```bash
# 1. Non-admin Accessing Admin Endpoints
curl -X GET http://localhost:3000/api/v1/admin/dashboard/statistics \
  -H "Authorization: Bearer regular_user_token"

# 2. Approve Already Approved Review
curl -X POST http://localhost:3000/api/v1/admin/products/1/reviews/1/approve \
  -H "Authorization: Bearer admin_access_token"

# 3. Delete Non-existent Review
curl -X DELETE http://localhost:3000/api/v1/admin/products/1/reviews/999999 \
  -H "Authorization: Bearer admin_access_token"
```

### 7. Rate Limiting Edge Cases

```bash
# 1. Rapid Successive Requests
for i in {1..20}; do
  curl -X GET http://localhost:3000/api/v1/products \
    -H "Authorization: Bearer your_access_token" &
done

# 2. Different IP Addresses (Simulated)
for i in {1..5}; do
  curl -X GET http://localhost:3000/api/v1/products \
    -H "Authorization: Bearer your_access_token" \
    -H "X-Forwarded-For: 192.168.1.$i"
done
```

### 8. Data Validation Edge Cases

```bash
# 1. SQL Injection Attempt
curl -X GET "http://localhost:3000/api/v1/products/search?q=' OR '1'='1" \
  -H "Authorization: Bearer your_access_token"

# 2. XSS Attempt
curl -X POST http://localhost:3000/api/v1/products/1/reviews \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "product_review": {
      "title": "<script>alert('xss')</script>",
      "content": "Normal content",
      "rating": 5
    }
  }'

# 3. JSON Injection
curl -X POST http://localhost:3000/api/v1/products/1/reviews \
  -H "Authorization: Bearer your_access_token" \
  -H "Content-Type: application/json" \
  -d '{
    "product_review": {
      "title": "Normal title",
      "content": "Normal content",
      "rating": 5,
      "metadata": {"malicious": "data"}
    }
  }'
```

### 9. Concurrency Edge Cases

```bash
# 1. Simultaneous Stock Updates
for i in {1..5}; do
  curl -X POST http://localhost:3000/api/v1/orders \
    -H "Authorization: Bearer your_access_token" \
    -H "Content-Type: application/json" \
    -d '{
      "order": {
        "address_id": 1,
        "order_items": [
          {
            "product_variant_id": 1,
            "quantity": 1
          }
        ]
      }
    }' &
done

# 2. Simultaneous Review Creation
for i in {1..5}; do
  curl -X POST http://localhost:3000/api/v1/products/1/reviews \
    -H "Authorization: Bearer your_access_token" \
    -H "Content-Type: application/json" \
    -d '{
      "product_review": {
        "title": "Review $i",
        "content": "Content $i",
        "rating": 5
      }
    }' &
done
```

These edge cases cover various scenarios including:
- Invalid inputs
- Security vulnerabilities
- Race conditions
- Rate limiting
- Data validation
- Authorization issues
- Resource constraints
- Concurrency issues

